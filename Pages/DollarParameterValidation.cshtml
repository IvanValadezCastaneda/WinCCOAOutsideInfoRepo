@page
@model WinCCOAOutsideInfoRepo.Pages.DollarParameterValidationModel
@{
    ViewData["Title"] = "Dollar Parameter Validation";
}
<h1>@ViewData["Title"]</h1>

<h3>Dollar Parameter Validation in WinCC OA</h3>

<p>When working with symbols that are referenced across panels, need animation, or require parameters, managing dollar parameter errors becomes crucial. These errors often lead to messages like "Dollar parameter does not exist". Here's a trick to handle such errors effectively:</p>

<pre><code>
string dpNameDollarParameter = $sDpe;
string DollarSubDirectory = $sDollarSubDirectory;
const string dpName = DollarDefinition("dpNameDollarParameter");
const string ProgressSubDirectory = DollarDefinition("DollarSubDirectory");
</code></pre>

<p>In the code above, you'll notice the usage of the <code>DollarDefinition</code> function. This function helps check the existence of a dollar parameter regardless of its count. If the parameter exists, it's returned. If not, it provides a message stating that the dollar parameter is not defined. Here are the details of the function:</p>

<pre><code>
public string DollarDefinition(string dollarName, string PanelFileName = "") {
    if (!PanelFileName.isEmpty()) {
        dyn_string DParams = getDollarParamsFromPanel(PanelFileName);
        for (int i = 0; DParams.count() > i; i++) {
            if (DParams.at(i) == dollarName) {
                if (isDollarDefined(dollarName)) {
                    return getDollarValue(dollarName);
                } else {
                    DebugN(dollarName + " not defined");
                    return "$ErrorNotDefined";
                }
            }
        }
    } else if (isDollarDefined(dollarName)) {
        return getDollarValue(dollarName);
    }

    DebugN(dollarName + " not found");
    return "$ErrorNotFound";
}
</code></pre>

<p>The <code>DollarDefinition</code> function is versatile. It can be part of a control script library. You'd call it to check if a dollar parameter is defined. Handling the errors and instantiation can be managed separately in your control script. This approach is particularly useful when dealing with a significant number of symbols or panels containing numerous dollar parameters.</p>

<p>Feel free to modify the code according to your needs. This method is one among several ways to handle such errors and ensures better organization when working with complex projects.</p>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h1 {
        color: #4a90e2;
        border-bottom: 2px solid #e6e6e6;
        padding-bottom: 10px;
    }

    h3, h4, h5 {
        color: #4a90e2;
    }

    form {
        background-color: #f5f7f9;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-top: 10px;
        color: #4a90e2;
    }

    input[type="text"] {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="button"] {
        margin-top: 20px;
        background-color: #4a90e2;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        input[type="button"]:hover {
            background-color: #357ab7;
        }

    pre {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 4px;
    }
</style>