@page
@model WinCCOAOutsideInfoRepo.Pages.SystemInternalStorageModel
@{
    ViewData["Title"] = "System Resources Monitoring";
}

<h1>System Resources Monitoring</h1>

<section class="resource-monitoring">
    <article>
        <h2>Implementation Details</h2>
        <p>
            The following code snippet illustrates the approach to querying the system for HDD capacity and RAM usage. It accounts for redundant servers by accepting the server number as input and adjusting the data point references accordingly.
        </p>
        <p class="warning">
            <strong>Important:</strong> It's imperative to handle internal data points with caution. Any unintended modification might lead to critical issues, potentially requiring a system reinstallation. Ensure that you are familiar with the data points you intend to monitor. Note that the HDD space monitored is specific to the drive where the project is installed, and the available RAM is just a snapshot of the current usage.
        </p>
        <pre><code>
int HDDCapacityInt;
int RamMemoryInt;
int ServerNum = $iNumber;

void initialize()
{
    ...
    if (Server == nullptr){
        DebugN("Failed to get server instance for:", ReceivedDollarParam);
    }
    string SystemNameServer = getSystemName();
    string HDD;
    string RAM;
    if(ServerNum != 2)
    {
        HDD = "_ArchivDisk.AvailPerc";
        RAM = "_MemoryCheck.FreePerc";
    }
    else
    {
        HDD = "_ArchivDisk_2.AvailPerc";
        RAM = "_MemoryCheck_2.FreePerc";
    }
    dpConnect("getHDDCapacity",SystemNameServer + HDD);
    dpConnect("getMemory", SystemNameServer + RAM);
}

void getHDDCapacity(string dpe, int percentage)
{
    int ProxyCapacityPercentage;
    dpGet(dpe,ProxyCapacityPercentage);
    HDDCapacity.setTxt((string)ProxyCapacityPercentage + " %");
}

void getMemory(string dpe, int percentage)
{
    int ProxyRamPercentage;
    dpGet(dpe,ProxyRamPercentage);
    RamMemory.setTxt((string)ProxyRamPercentage + " %");
}
        </code></pre>
    </article>
    <article>
        <h2>Considerations for Redundant and Distributed Systems</h2>
        <p>
            The code differentiates between servers in a redundant setup by adjusting the data point strings based on the server number. This flexibility is crucial for systems with multiple servers, enabling targeted resource monitoring across different machine instances.
        </p>
        <p class="note">
            <strong>Note:</strong> The approach outlined is primarily suited for redundant systems but can be adapted for distributed systems with appropriate modifications to the server identification logic.
        </p>
    </article>

    <article>
        <h2>Caveats and Additional Information</h2>
        <p class="info">
            For comprehensive monitoring, consider exploring additional system metrics and incorporating external tools or scripts that can provide a broader overview of system health and resource utilization.
        </p>
    </article>

</section>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h1 {
        color: #4a90e2;
        border-bottom: 2px solid #e6e6e6;
        padding-bottom: 10px;
    }

    h3, h4, h5 {
        color: #4a90e2;
    }

    form {
        background-color: #f5f7f9;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-top: 10px;
        color: #4a90e2;
    }

    input[type="text"] {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="button"] {
        margin-top: 20px;
        background-color: #4a90e2;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        input[type="button"]:hover {
            background-color: #357ab7;
        }

    pre {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 4px;
    }
    .warning 
    { 
        background-color: #ffcccb; padding: 10px;
    }

    .note 
    { 
        background-color: #e6e6e6; padding: 10px;
    }

    .info 
    { 
        background-color: #d1ecf1; padding: 10px;
    }

</style>