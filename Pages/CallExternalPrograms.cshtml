@page
@model WinCCOAOutsideInfoRepo.Pages.CallExternalProgramsModel
@{
    ViewData["Title"] = "Calling External Programs from WinCC OA";
}

<h1>Calling External Programs from WinCC OA</h1>

<p>In some restricted environments, users might not have direct access to the system or OS tools. However, it is possible to call external programs (like the Calculator or a Browser) directly from a WinCC OA script.</p>

<h2>Example 1: Opening the Calculator</h2>

<p>Here's a sample script that detects the Calculator executable and opens it:</p>


<pre><code>
main() 
{
    // Define calculator names for Windows versions
    string calcName = "calc.exe";
    string calcPath = getenv("windir") + "\\system32\\" + calcName;
    string calcNameNew = "calc1.exe"; // Alternative for newer systems
    string calcPathNew = getenv("windir") + "\\system32\\" + calcNameNew;

    // Check for the new calculator first
    if (access(calcPathNew, F_OK) == 0) 
    {     
        system("taskkill /im " + calcNameNew); // Kill any existing instance
        system("start /im " + calcPathNew);   // Start calculator
    }
    else 
    { 
        if (access(calcPath, F_OK) == 0) 
        {
            system("taskkill /im " + calcName);
            system("start /im " + calcPath);
        }
        else 
        {
            DebugN("Error: Calculator executable not found!");
        }
    }
}
</code></pre>


<h2>Example 2: Opening a Web Browser in Kiosk Mode</h2>

<p>The following script demonstrates how to launch a browser in **Kiosk Mode** (full-screen) while ensuring no prior browser processes are running:</p>

<pre><code>
string browserExe = "CustomBrowser.exe";
string processName = "CustomBrowser";

void terminateBrowserProcesses() {
    string killCmd = "taskkill /fi \"IMAGENAME eq " + processName + "*\" /IM " + browserExe + " /F";

    if (system(killCmd) != 0) {
        DebugN("Warning: Unable to terminate existing browser processes.");
    }
}

void launchBrowserInKioskMode(string url) {
    int screenWidth, screenHeight, startX, startY, screenCount;
    string launchParams = "";

    screenCount = getScreenCount();

    // Open on the second screen if there are two monitors
    if (screenCount == 2) {
        getScreenSize(screenWidth, screenHeight, startX, startY, 1);
        launchParams = " --window-position=" + startX + "," + startY;
    }

    string command = "call " + browserExe + " --kiosk " + '\"' + url + '\"' + launchParams;
    if (system(command) == -1) {
        DebugN("Error: Failed to launch the browser in Kiosk mode.");
    }
}
</code></pre>

<h2>Example 3: Launching a Web Application in App Mode</h2>

<p>The following script launches a browser in **App Mode** (maximized) on the primary screen:</p>

<pre><code>void launchBrowserInAppMode(string url) {
    string command = "start " + browserExe + " --start-maximized --app=" + '\"' + url + '\"';

    if (system(command) != 0) {
        DebugN("Error: Failed to start the browser in App mode.");
    }
}</code></pre>

<h2>How It Works</h2>

<ul>
    <li><strong>system()</strong>: Executes system commands like starting or killing processes.</li>
    <li><strong>access()</strong>: Checks if a file exists at the specified path.</li>
    <li><strong>getScreenCount()</strong> and <strong>getScreenSize()</strong>: Used to position applications when multiple screens are detected.</li>
</ul>

<h2>Important Notes</h2>
<ul>
    <li>Ensure the executable files (like `calc.exe` or custom browser executables) are accessible in the system path.</li>
    <li>Using `taskkill` helps ensure no duplicate processes are running before launching a new instance.</li>
    <li>Customize executable names and paths as per your project's requirements.</li>
</ul>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h1 {
        color: #4a90e2;
        border-bottom: 2px solid #e6e6e6;
        padding-bottom: 10px;
    }

    h3, h4, h5 {
        color: #4a90e2;
    }

    form {
        background-color: #f5f7f9;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-top: 10px;
        color: #4a90e2;
    }

    input[type="text"] {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="button"] {
        margin-top: 20px;
        background-color: #4a90e2;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        input[type="button"]:hover {
            background-color: #357ab7;
        }

    pre {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 4px;
    }
</style>