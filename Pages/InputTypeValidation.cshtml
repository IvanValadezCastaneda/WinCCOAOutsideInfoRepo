@page
@model WinCCOAOutsideInfoRepo.Pages.InputTypeValidationModel
@{
    ViewData["Title"] = "Advanced Input Validation in WinCC OA";
}

<h1>@ViewData["Title"]</h1>

<article>
    <h2>Introduction to Input Validation</h2>
    <p>
        Input validation is a cornerstone of robust application development in WinCC OA, ensuring data integrity and system stability. This section details implementing input validation mechanisms that distinguish between integer and string inputs, enhancing user experience and system safety.
    </p>
</article>

<article>
    <h2>Implementing Integer Input Validation</h2>
    <p>
        Integer input validation ensures the acceptance of numerical values only. The following example illustrates a method to validate integer inputs, verifying each character against numeric criteria. This method should reside within the event handler of the panel, triggered upon user interaction.
    </p>
    <pre><code>// Integer Input Validation Function
void validateIntegerInput(string newText, string objectName) {
    bool isValid = true;
    for (int i = 0; i &lt; newText.length(); i++) {
        if (newText[i] &lt; '0' || newText[i] &gt; '9') {
            isValid = false;
            break;
        }
    }

    if (!isValid) {
        setValue(objectName, "backCol", "BackgroundRed"); // Error state
        NoSaveAllowed = TRUE;
    } else {
        setValue(objectName, "backCol", "BackgroundGreen"); // Normal state
        NoSaveAllowed = FALSE;
    }
}</code></pre>
    <p>Trigger this validation by connecting the input field's event to the function:</p>
    <pre><code>// Event Handler for an Integer Input Field
main(mapping event) {
    string newText = event["newText"];
    validateIntegerInput(newText, this.refName());
}</code></pre>
</article>

<article>
    <h2>Validating String Inputs for Alphabetic Characters</h2>
    <p>
        String inputs often require validation to ensure they contain alphabetic characters only. The following function demonstrates string input validation, excluding numerical digits effectively.
    </p>
    <pre><code>// String Input Validation Function
void validateStringInput(string newText, string objectName) {
    bool hasInvalidChar = false;
    // Validate against numeric characters
    for (int i = 0; i &lt; newText.length(); i++) {
        if ('0' &lt;= newText[i] && newText[i] &lt;= '9') {
            hasInvalidChar = true;
            break;
        }
    }

    if (hasInvalidChar) {
        setValue(objectName, "backCol", "BackgroundRed"); // Error state
        NoSaveAllowed = TRUE;
    } else {
        setValue(objectName, "backCol", "BackgroundGreen"); // Normal state
        NoSaveAllowed = FALSE;
    }
}</code></pre>
    <p>Invoke this validation in the input field's event handling:</p>
    <pre><code>// Event Handler for a String Input Field
main(mapping event) {
    string newText = event["newText"];
    validateStringInput(newText, this.refName());
}</code></pre>
</article>

<article>
    <h2>Handling Validation States with Global Flags</h2>
    <p>
        A global flag, such as <code>NoSaveAllowed</code>, helps manage the application's state based on input validity. This approach ensures critical operations proceed only with valid inputs across the board.
    </p>
</article>

<article>
    <h2>Conclusion</h2>
    <p>
        Through these examples, we've outlined how to effectively implement and manage input validation within WinCC OA panels. Remember, the key to successful input validation is integrating these checks seamlessly into your panel's event handling, ensuring data integrity and enhancing user experience.
    </p>
</article>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h1 {
        color: #4a90e2;
        border-bottom: 2px solid #e6e6e6;
        padding-bottom: 10px;
    }

    h3, h4, h5 {
        color: #4a90e2;
    }

    form {
        background-color: #f5f7f9;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-top: 10px;
        color: #4a90e2;
    }

    input[type="text"] {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="button"] {
        margin-top: 20px;
        background-color: #4a90e2;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        input[type="button"]:hover {
            background-color: #357ab7;
        }

    pre {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 4px;
    }

    .warning {
        background-color: #ffcccb;
        padding: 10px;
    }

    .note {
        background-color: #e6e6e6;
        padding: 10px;
    }

    .info {
        background-color: #d1ecf1;
        padding: 10px;
    }

</style>