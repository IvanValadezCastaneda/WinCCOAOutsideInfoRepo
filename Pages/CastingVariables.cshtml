@page
@model WinCCOAOutsideInfoRepo.Pages.CastingVariablesModel
@{
    ViewData["Title"] = "Casting Variables versus Conversion";
}

<article>
    <h2>Understanding Casting and Conversion</h2>
    <p>
        Casting and variable conversion are essential concepts in WinCC OA for manipulating data types. While some conversions are straightforward, others require explicit casting. Let's explore the common scenarios and best practices.
    </p>
</article>

<article>
    <h2>Casting Variables</h2>
    <p>
        In WinCC OA, you can cast variables using the syntax <code>(type)</code>. For example, to cast a string to an integer:
    </p>
    <pre><code>string name = "James";
int age = (int)name; // This will throw an error</code></pre>
    <p>
        However, you can cast anything to a string, including numbers:
    </p>
    <pre><code>string ageAsString = (string)40; // This is valid</code></pre>
    <p>
        Casting to <code>bool</code> is also possible, where any value is considered <code>true</code> except for <code>false</code> and <code>0</code>:
    </p>
    <pre><code>bool isValid = (bool)40; // This will return true</code></pre>
</article>

<article>
    <h2>Converting Time Variables</h2>
    <p>
        Time variables require a specific conversion approach. Use the <code>makeTime()</code> function, which accepts an integer or a casted string as its argument to convert it into a time value:
    </p>
    <pre><code>int timeValue = 2020; // Example time value
time myTime = makeTime(timeValue,0,0,0,0);</code></pre>
    <p>
        This will in turn return a time that is the year 2020, while techically true it will require more data in order to be a proper full time set
    </p>
</article>

<article>
    <h2>Using <code>anytype</code></h2>
    <p>
        You can cast anything to <code>anytype</code>, which can hold any type of data. However, when debugging, it will most likely return a string or <code>anytype</code> based on the input variables:
    </p>
    <pre><code>anytype variable = (anytype)"Hello, World!";</code></pre>
</article>

<article>
    <h2>Conclusion</h2>
    <p>
        Mastering casting and variable conversion is crucial for effective data manipulation in WinCC OA. While this is only the first part there is a full subset of "Make" Functions that expand upon this.
    </p>
</article>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h1 {
        color: #4a90e2;
        border-bottom: 2px solid #e6e6e6;
        padding-bottom: 10px;
    }

    h3, h4, h5 {
        color: #4a90e2;
    }

    form {
        background-color: #f5f7f9;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-top: 10px;
        color: #4a90e2;
    }

    input[type="text"] {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="button"] {
        margin-top: 20px;
        background-color: #4a90e2;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        input[type="button"]:hover {
            background-color: #357ab7;
        }

    pre {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 4px;
    }
</style>